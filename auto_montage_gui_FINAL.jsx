// Auto Montage Builder Pro - Enhanced Edition for Adobe Premiere Pro
// –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Premiere API

// –í–ê–ñ–ù–û: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
//#include "effects-module.js"
//#include "media-encoder-integration.js"

(function main() {
    // ===== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò =====
    var SUPPORTED_IMAGE_FORMATS = ['.jpg', '.jpeg', '.png', '.tiff', '.bmp'];
    var SUPPORTED_AUDIO_FORMATS = ['.mp3', '.wav', '.aiff'];
    var EXPORT_PRESETS = {
        'YouTube': { width: 1920, height: 1080, bitrate: 8000, fps: 30 },
        'YouTube Shorts': { width: 1080, height: 1920, bitrate: 10000, fps: 30 },
        'TikTok': { width: 1080, height: 1920, bitrate: 6000, fps: 30 },
        'Instagram Reels': { width: 1080, height: 1920, bitrate: 8000, fps: 30 },
        'Instagram Feed': { width: 1080, height: 1080, bitrate: 6000, fps: 30 },
        'Twitter': { width: 1280, height: 720, bitrate: 5000, fps: 30 },
        'Custom': { width: 1920, height: 1080, bitrate: 8000, fps: 30 }
    };

    // ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
    var PROJECT_FOLDER = null;
    var AUDIO_VARIANTS_FOLDER = null;
    var RENDERS_FOLDER = null;

    // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    if (!initializeScript()) {
        alert("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.");
        return;
    }

    // ===== –ì–õ–ê–í–ù–û–ï –û–ö–ù–û =====
    var win = new Window("dialog", "Auto Montage Builder Pro v2.0", undefined);
    win.orientation = "column";
    win.alignChildren = ["fill", "top"];
    win.spacing = 10;
    win.margins = 15;

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    var headerGroup = win.add("group");
    headerGroup.alignment = "center";
    var headerText = headerGroup.add("statictext", undefined, "üé¨ AUTO MONTAGE BUILDER PRO");
    headerText.graphics.font = ScriptUI.newFont("Arial", "Bold", 18);

    // –ü–∞–Ω–µ–ª—å –≤–∫–ª–∞–¥–æ–∫
    var tabPanel = win.add("tabbedpanel");
    tabPanel.alignChildren = "fill";
    tabPanel.preferredSize = [700, 600];

    var tabMain = tabPanel.add("tab", undefined, "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è");
    var tabPresets = tabPanel.add("tab", undefined, "üé® –ü—Ä–µ—Å–µ—Ç—ã");
    var tabTemplates = tabPanel.add("tab", undefined, "üì± –®–∞–±–ª–æ–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–∞");
    var tabSettings = tabPanel.add("tab", undefined, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");

    // ===== –í–ö–õ–ê–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–Ø =====
    setupMainTab(tabMain);

    // ===== –í–ö–õ–ê–î–ö–ê –ü–†–ï–°–ï–¢–´ =====
    setupPresetsTab(tabPresets);

    // ===== –í–ö–õ–ê–î–ö–ê –®–ê–ë–õ–û–ù–´ –≠–ö–°–ü–û–†–¢–ê =====
    setupTemplatesTab(tabTemplates);

    // ===== –í–ö–õ–ê–î–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò =====
    setupSettingsTab(tabSettings);

    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º
    var bottomGroup = win.add("group");
    bottomGroup.alignment = "center";
    var closeBtn = bottomGroup.add("button", undefined, "–ó–∞–∫—Ä—ã—Ç—å");
    closeBtn.onClick = function() { win.close(); };

    // ===== –§–£–ù–ö–¶–ò–ò –ù–ê–°–¢–†–û–ô–ö–ò –í–ö–õ–ê–î–û–ö =====
    function setupMainTab(tab) {
        tab.orientation = "column";
        tab.alignChildren = ["fill", "top"];
        tab.spacing = 10;

        // –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        var folderPanel = tab.add("panel", undefined, "üìÅ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞");
        folderPanel.orientation = "row";
        var folderPathField = folderPanel.add("edittext", undefined, "");
        folderPathField.characters = 45;
        var browseBtn = folderPanel.add("button", undefined, "–û–±–∑–æ—Ä...");
        
        browseBtn.onClick = function() {
            var folder = Folder.selectDialog("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—É–¥–∏–æ");
            if (folder) {
                folderPathField.text = folder.fsName;
                PROJECT_FOLDER = folder.fsName;
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                AUDIO_VARIANTS_FOLDER = PROJECT_FOLDER + "/audio_variants";
                RENDERS_FOLDER = PROJECT_FOLDER + "/renders";
                
                var audioVariantsDir = new Folder(AUDIO_VARIANTS_FOLDER);
                if (!audioVariantsDir.exists) audioVariantsDir.create();
                
                var rendersDir = new Folder(RENDERS_FOLDER);
                if (!rendersDir.exists) rendersDir.create();
                
                // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                var scanResult = scanProjectFolder(folder);
                updateInfoPanel(scanResult);
            }
        };

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        var infoPanel = tab.add("panel", undefined, "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ");
        infoPanel.preferredSize.height = 120;
        var infoText = infoPanel.add("statictext", undefined, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã", {multiline: true});
        
        function updateInfoPanel(scanResult) {
            var info = "–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:\n";
            info += "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " + scanResult.images.length + "\n";
            info += "‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤: " + scanResult.audio.length + "\n";
            info += "‚Ä¢ –ì–æ—Ç–æ–≤—ã—Ö –ø–∞—Ä: " + scanResult.pairs.length;
            
            if (scanResult.pairs.length > 0) {
                info += "\n\n–ì–æ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã:";
                for (var i = 0; i < Math.min(3, scanResult.pairs.length); i++) {
                    info += "\n" + (i + 1) + ". " + scanResult.pairs[i].baseName;
                }
                if (scanResult.pairs.length > 3) {
                    info += "\n... –∏ –µ—â–µ " + (scanResult.pairs.length - 3);
                }
            }
            
            infoText.text = info;
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        var genPanel = tab.add("panel", undefined, "üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
        genPanel.orientation = "column";
        genPanel.alignChildren = ["fill", "top"];

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
        var countGroup = genPanel.add("group");
        countGroup.add("statictext", undefined, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:");
        var countDropdown = countGroup.add("dropdownlist", undefined, ["1", "2", "3", "4", "5"]);
        countDropdown.selection = 0;

        // –®–∞–±–ª–æ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞
        var templateGroup = genPanel.add("group");
        templateGroup.add("statictext", undefined, "–®–∞–±–ª–æ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞:");
        var templateDropdown = templateGroup.add("dropdownlist", undefined, Object.keys(EXPORT_PRESETS));
        templateDropdown.selection = 0;

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        var customPanel = genPanel.add("panel", undefined, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        customPanel.orientation = "column";
        
        var resGroup = customPanel.add("group");
        resGroup.add("statictext", undefined, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:");
        var widthInput = resGroup.add("edittext", undefined, "1920");
        widthInput.characters = 6;
        resGroup.add("statictext", undefined, "x");
        var heightInput = resGroup.add("edittext", undefined, "1080");
        heightInput.characters = 6;

        var bitrateGroup = customPanel.add("group");
        bitrateGroup.add("statictext", undefined, "–ë–∏—Ç—Ä–µ–π—Ç (kbps):");
        var bitrateInput = bitrateGroup.add("edittext", undefined, "8000");
        bitrateInput.characters = 8;

        var fpsGroup = customPanel.add("group");
        fpsGroup.add("statictext", undefined, "FPS:");
        var fpsDropdown = fpsGroup.add("dropdownlist", undefined, ["24", "25", "30", "50", "60"]);
        fpsDropdown.selection = 2;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à–∞–±–ª–æ–Ω–∞
        templateDropdown.onChange = function() {
            var preset = EXPORT_PRESETS[templateDropdown.selection.text];
            if (preset) {
                widthInput.text = preset.width;
                heightInput.text = preset.height;
                bitrateInput.text = preset.bitrate;
                for (var i = 0; i < fpsDropdown.items.length; i++) {
                    if (fpsDropdown.items[i].text == preset.fps) {
                        fpsDropdown.selection = i;
                        break;
                    }
                }
            }
            customPanel.enabled = (templateDropdown.selection.text === "Custom");
        };

        // –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
        var presetsPanel = tab.add("panel", undefined, "üé® –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–æ–≤");
        presetsPanel.orientation = "column";
        var presetDropdowns = [];
        
        for (var i = 0; i < 5; i++) {
            var row = presetsPanel.add("group");
            row.add("statictext", undefined, "–í–∏–¥–µ–æ " + (i + 1) + ":");
            var dropdown = row.add("dropdownlist", undefined, []);
            dropdown.preferredSize.width = 200;
            presetDropdowns.push(dropdown);
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            var previewBtn = row.add("button", undefined, "üëÅÔ∏è");
            previewBtn.helpTip = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Å–µ—Ç–∞";
            previewBtn.onClick = createPreviewHandler(dropdown);
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
        loadPresetsIntoDropdowns(presetDropdowns);

        // –û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        var exportPanel = tab.add("panel", undefined, "üì§ –û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞");
        var exportGroup = exportPanel.add("group");
        var exportAuto = exportGroup.add("radiobutton", undefined, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç");
        var exportManual = exportGroup.add("radiobutton", undefined, "–û—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ");
        exportManual.value = true;

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        var progressPanel = tab.add("panel", undefined, "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å");
        var progressBar = progressPanel.add("progressbar", undefined, 0, 100);
        progressBar.preferredSize = [650, 20];
        var progressText = progressPanel.add("statictext", undefined, "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        var btnGroup = tab.add("group");
        btnGroup.alignment = "center";
        
        var prepareAudioBtn = btnGroup.add("button", undefined, "üéµ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞—É–¥–∏–æ");
        prepareAudioBtn.onClick = function() {
            if (!PROJECT_FOLDER) {
                alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!");
                return;
            }
            prepareAudioFiles(PROJECT_FOLDER, progressBar, progressText);
        };

        var generateBtn = btnGroup.add("button", undefined, "üé¨ –°–û–ó–î–ê–¢–¨ –ú–û–ù–¢–ê–ñ");
        generateBtn.preferredSize.width = 200;
        generateBtn.onClick = function() {
            if (!PROJECT_FOLDER) {
                alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞!");
                return;
            }
            
            generateMontage({
                folder: PROJECT_FOLDER,
                audioVariantsFolder: AUDIO_VARIANTS_FOLDER,
                rendersFolder: RENDERS_FOLDER,
                count: parseInt(countDropdown.selection.text),
                presets: getSelectedPresets(presetDropdowns),
                template: templateDropdown.selection.text,
                customSettings: {
                    width: parseInt(widthInput.text),
                    height: parseInt(heightInput.text),
                    bitrate: parseInt(bitrateInput.text),
                    fps: parseInt(fpsDropdown.selection.text)
                },
                autoExport: exportAuto.value,
                progressBar: progressBar,
                progressText: progressText
            });
        };

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
        countDropdown.onChange = function() {
            var count = parseInt(countDropdown.selection.text);
            for (var i = 0; i < 5; i++) {
                presetDropdowns[i].parent.visible = (i < count);
            }
        };
        countDropdown.onChange();
    }

    function setupPresetsTab(tab) {
        tab.orientation = "column";
        tab.alignChildren = ["fill", "top"];

        // –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
        var listPanel = tab.add("panel", undefined, "üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ—Å–µ—Ç—ã");
        listPanel.preferredSize.height = 200;
        var presetList = listPanel.add("listbox", undefined, []);
        presetList.preferredSize = [650, 180];
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
        var listBtnGroup = listPanel.add("group");
        var loadBtn = listBtnGroup.add("button", undefined, "–ó–∞–≥—Ä—É–∑–∏—Ç—å");
        var deleteBtn = listBtnGroup.add("button", undefined, "–£–¥–∞–ª–∏—Ç—å");
        var duplicateBtn = listBtnGroup.add("button", undefined, "–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å");

        // –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
        var editPanel = tab.add("panel", undefined, "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞");
        editPanel.orientation = "column";
        editPanel.alignChildren = ["left", "top"];

        // –ù–∞–∑–≤–∞–Ω–∏–µ
        var nameGroup = editPanel.add("group");
        nameGroup.add("statictext", undefined, "–ù–∞–∑–≤–∞–Ω–∏–µ:");
        var nameField = nameGroup.add("edittext", undefined, "–ù–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç");
        nameField.characters = 30;

        // –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        var audioPanel = editPanel.add("panel", undefined, "üéµ –ê—É–¥–∏–æ");
        var pitchGroup = audioPanel.add("group");
        pitchGroup.add("statictext", undefined, "Pitch:");
        var pitchDropdown = pitchGroup.add("dropdownlist", undefined, ["0", "-0.5", "-1", "-1.5", "-2", "+0.5", "+1"]);
        pitchDropdown.selection = 0;

        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        var effectsPanel = editPanel.add("panel", undefined, "üé® –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã");
        
        // Ken Burns
        var kbGroup = effectsPanel.add("group");
        kbGroup.add("statictext", undefined, "Ken Burns:");
        var kbDropdown = kbGroup.add("dropdownlist", undefined, ["–í—ã–∫–ª—é—á–µ–Ω", "Zoom In", "Zoom Out", "Pan Left", "Pan Right", "Random"]);
        kbDropdown.selection = 0;
        kbGroup.add("statictext", undefined, "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:");
        var kbIntensity = kbGroup.add("slider", undefined, 20, 0, 100);
        kbIntensity.preferredSize.width = 100;

        // –ü–µ—Ä–µ—Ö–æ–¥—ã
        var transGroup = effectsPanel.add("group");
        transGroup.add("statictext", undefined, "–ü–µ—Ä–µ—Ö–æ–¥:");
        var transDropdown = transGroup.add("dropdownlist", undefined, ["Fade", "Cross Dissolve", "Dip to Black", "Dip to White", "Wipe", "Slide", "Push", "Zoom", "Random"]);
        transDropdown.selection = 0;
        transGroup.add("statictext", undefined, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:");
        var transDuration = transGroup.add("edittext", undefined, "1.0");
        transDuration.characters = 5;

        // –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        var colorPanel = editPanel.add("panel", undefined, "üé® –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è");
        
        // –í–∏–Ω—å–µ—Ç–∫–∞
        var vignetteGroup = colorPanel.add("group");
        var vignetteCheck = vignetteGroup.add("checkbox", undefined, "–í–∏–Ω—å–µ—Ç–∫–∞");
        vignetteGroup.add("statictext", undefined, "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:");
        var vignetteSlider = vignetteGroup.add("slider", undefined, 40, 0, 100);
        vignetteSlider.preferredSize.width = 150;

        // –¶–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä
        var filterGroup = colorPanel.add("group");
        var filterCheck = filterGroup.add("checkbox", undefined, "–¶–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä");
        filterGroup.add("statictext", undefined, "–¢–∏–ø:");
        var filterDropdown = filterGroup.add("dropdownlist", undefined, ["–¢–µ–ø–ª—ã–π", "–•–æ–ª–æ–¥–Ω—ã–π", "–í–∏–Ω—Ç–∞–∂", "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π", "–°–µ–ø–∏—è"]);
        filterDropdown.selection = 0;

        // Overlay
        var overlayGroup = colorPanel.add("group");
        var overlayCheck = overlayGroup.add("checkbox", undefined, "Overlay");
        overlayGroup.add("statictext", undefined, "–§–∞–π–ª:");
        var overlayPath = overlayGroup.add("edittext", undefined, "");
        overlayPath.characters = 20;
        var overlayBrowse = overlayGroup.add("button", undefined, "...");

        // –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        var saveBtnGroup = editPanel.add("group");
        saveBtnGroup.alignment = "center";
        var saveBtn = saveBtnGroup.add("button", undefined, "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç");
        var saveAsBtn = saveBtnGroup.add("button", undefined, "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...");

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        loadBtn.onClick = function() {
            if (presetList.selection) {
                loadPresetIntoEditor(presetList.selection.text);
            }
        };

        saveBtn.onClick = function() {
            savePreset(collectPresetData());
            refreshPresetList();
        };

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
        refreshPresetList();

        function refreshPresetList() {
            presetList.removeAll();
            var presets = readPresets();
            for (var i = 0; i < presets.length; i++) {
                presetList.add("item", presets[i].name);
            }
        }

        function collectPresetData() {
            return {
                name: nameField.text,
                pitch: pitchDropdown.selection.text,
                kenBurns: {
                    type: kbDropdown.selection.text,
                    intensity: kbIntensity.value
                },
                transition: {
                    type: transDropdown.selection.text,
                    duration: parseFloat(transDuration.text)
                },
                vignette: {
                    enabled: vignetteCheck.value,
                    intensity: vignetteSlider.value
                },
                colorFilter: {
                    enabled: filterCheck.value,
                    type: filterDropdown.selection.text
                },
                overlay: {
                    enabled: overlayCheck.value,
                    path: overlayPath.text
                }
            };
        }
    }

    function setupTemplatesTab(tab) {
        tab.orientation = "column";
        tab.alignChildren = ["fill", "top"];

        // –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        var templatesPanel = tab.add("panel", undefined, "üì± –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π");
        
        for (var platform in EXPORT_PRESETS) {
            var preset = EXPORT_PRESETS[platform];
            var row = templatesPanel.add("group");
            row.alignment = "left";
            
            var icon = row.add("statictext", undefined, getplatformIcon(platform));
            var name = row.add("statictext", undefined, platform);
            name.characters = 15;
            
            var specs = row.add("statictext", undefined, 
                preset.width + "x" + preset.height + " @ " + preset.bitrate + "kbps, " + preset.fps + "fps");
            specs.graphics.foregroundColor = specs.graphics.newPen(specs.graphics.PenType.SOLID_COLOR, [0.5, 0.5, 0.5], 1);
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        var tipsPanel = tab.add("panel", undefined, "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏");
        var tipsText = tipsPanel.add("statictext", undefined, 
            "‚Ä¢ YouTube: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n" +
            "‚Ä¢ TikTok/Reels: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω\n" +
            "‚Ä¢ Instagram Feed: –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª–µ–Ω—Ç—ã\n" +
            "‚Ä¢ Twitter: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", 
            {multiline: true});
        tipsText.preferredSize = [650, 100];
    }

    function setupSettingsTab(tab) {
        tab.orientation = "column";
        tab.alignChildren = ["fill", "top"];

        // –ü—É—Ç–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
        var pathsPanel = tab.add("panel", undefined, "üìÅ –ü—É—Ç–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º");
        
        var ffmpegGroup = pathsPanel.add("group");
        ffmpegGroup.add("statictext", undefined, "FFmpeg:");
        var ffmpegPath = ffmpegGroup.add("edittext", undefined, "ffmpeg.exe");
        ffmpegPath.characters = 40;
        var ffmpegBrowse = ffmpegGroup.add("button", undefined, "...");

        var ameGroup = pathsPanel.add("group");
        ameGroup.add("statictext", undefined, "Media Encoder:");
        var amePath = ameGroup.add("edittext", undefined, findMediaEncoder());
        amePath.characters = 40;
        var ameBrowse = ameGroup.add("button", undefined, "...");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        var perfPanel = tab.add("panel", undefined, "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
        
        var threadsGroup = perfPanel.add("group");
        threadsGroup.add("statictext", undefined, "–ü–æ—Ç–æ–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:");
        var threadsSlider = threadsGroup.add("slider", undefined, 4, 1, 16);
        var threadsValue = threadsGroup.add("statictext", undefined, "4");
        threadsSlider.onChanging = function() {
            threadsValue.text = Math.round(threadsSlider.value);
        };

        var cacheGroup = perfPanel.add("group");
        var cacheCheck = cacheGroup.add("checkbox", undefined, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –ø—Ä–µ–≤—å—é");
        cacheCheck.value = true;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var defaultsPanel = tab.add("panel", undefined, "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        
        var autoSaveGroup = defaultsPanel.add("group");
        var autoSaveCheck = autoSaveGroup.add("checkbox", undefined, "–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞");
        autoSaveCheck.value = true;

        var proxyGroup = defaultsPanel.add("group");
        var proxyCheck = proxyGroup.add("checkbox", undefined, "–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è 4K");
        proxyCheck.value = false;

        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        var saveBtn = tab.add("button", undefined, "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        saveBtn.alignment = "center";
        saveBtn.onClick = function() {
            saveSettings({
                ffmpegPath: ffmpegPath.text,
                amePath: amePath.text,
                threads: Math.round(threadsSlider.value),
                useCache: cacheCheck.value,
                autoSave: autoSaveCheck.value,
                createProxy: proxyCheck.value
            });
        };
    }

    // ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
    
    function scanProjectFolder(folder) {
        var images = [];
        var audio = [];
        var pairs = [];
        var files = folder.getFiles();
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –ø–∞–ø–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø–æ–¥–ø–∞–ø–∫–∏
        for (var i = 0; i < files.length; i++) {
            if (files[i] instanceof File) {
                var fileName = files[i].name;
                var ext = fileName.substr(fileName.lastIndexOf('.')).toLowerCase();
                
                if (SUPPORTED_IMAGE_FORMATS.indexOf(ext) > -1) {
                    images.push(files[i]);
                } else if (SUPPORTED_AUDIO_FORMATS.indexOf(ext) > -1) {
                    audio.push(files[i]);
                }
            }
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä–∞–º
        for (var j = 0; j < images.length; j++) {
            var imgName = images[j].name;
            var imgNumber = imgName.match(/^\d+/);
            
            if (imgNumber) {
                for (var k = 0; k < audio.length; k++) {
                    var audioName = audio[k].name;
                    var audioNumber = audioName.match(/^\d+/);
                    
                    if (audioNumber && imgNumber[0] === audioNumber[0]) {
                        pairs.push({
                            number: imgNumber[0],
                            baseName: imgNumber[0],
                            image: images[j],
                            audio: audio[k]
                        });
                        break;
                    }
                }
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É
        pairs.sort(function(a, b) {
            return parseInt(a.number) - parseInt(b.number);
        });
        
        return {
            images: images,
            audio: audio,
            pairs: pairs
        };
    }

    function generateMontage(config) {
        var project = app.project;
        if (!project) {
            alert("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!");
            return;
        }

        config.progressText.text = "–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...";
        config.progressBar.value = 0;

        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤ –ø—Ä–æ–µ–∫—Ç–µ
            var rootItem = project.rootItem;
            var projectFolder = rootItem.createBin("Auto Montage " + new Date().toLocaleString());

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            config.progressText.text = "–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤...";
            var scanResult = scanProjectFolder(new Folder(config.folder));
            var importedItems = importProjectFiles(scanResult, projectFolder, config.progressBar);

            // –°–æ–∑–¥–∞–µ–º —Å–µ–∫–≤–µ–Ω—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            for (var i = 0; i < config.count; i++) {
                config.progressText.text = "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ " + (i + 1) + " –∏–∑ " + config.count;
                config.progressBar.value = (i / config.count) * 100;

                var preset = config.presets[i];
                var settings = config.template === "Custom" ? config.customSettings : EXPORT_PRESETS[config.template];

                // –°–æ–∑–¥–∞–µ–º —Å–µ–∫–≤–µ–Ω—Ü–∏—é
                var sequence = createSequence(
                    "Montage_" + (i + 1) + "_" + preset.name,
                    settings.width,
                    settings.height,
                    settings.fps
                );

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–ø—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
                buildSequence(sequence, importedItems, preset, settings, config.audioVariantsFolder);

                // –≠–∫—Å–ø–æ—Ä—Ç –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ
                if (config.autoExport) {
                    exportSequence(sequence, config.rendersFolder, settings);
                }
            }

            config.progressText.text = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!";
            config.progressBar.value = 100;

        } catch (e) {
            alert("–û—à–∏–±–∫–∞: " + e.toString());
            config.progressText.text = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏";
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫–≤–µ–Ω—Ü–∏–∏
    function createSequence(name, width, height, fps) {
        var project = app.project;
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫–≤–µ–Ω—Ü–∏–∏ –≤ Premiere
        var sequence = project.activeSequence;
        if (!sequence) {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å–µ–∫–≤–µ–Ω—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç
            var projectItem = project.rootItem.createBin("Sequences");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
            var presetPath = findSequencePreset(width, height, fps);
            sequence = project.createNewSequence(name, presetPath);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∫–≤–µ–Ω—Ü–∏–∏
        if (sequence) {
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            sequence.name = name;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            var settings = sequence.getSettings();
            if (settings) {
                // –≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
                try {
                    sequence.setSettings({
                        videoFrameWidth: width,
                        videoFrameHeight: height,
                        videoFrameRate: fps
                    });
                } catch(e) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                    $.writeln("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ –¥–ª—è —Å–µ–∫–≤–µ–Ω—Ü–∏–∏");
                }
            }
        }
        
        return sequence;
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ —Å–µ–∫–≤–µ–Ω—Ü–∏–∏
    function findSequencePreset(width, height, fps) {
        // –ü—É—Ç—å –∫ –ø—Ä–µ—Å–µ—Ç–∞–º Premiere Pro
        var presetFolder = new Folder(Folder.userData.fsName + "/Documents/Adobe/Premiere Pro/*/Profile-CreativeCloud-/Settings/Custom");
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
        var standardPresets = {
            "1920x1080_30": "AVCHD 1080p30",
            "1920x1080_25": "AVCHD 1080p25", 
            "1280x720_30": "AVCHD 720p30",
            "3840x2160_30": "Digital SLR 4K 30p"
        };
        
        var key = width + "x" + height + "_" + Math.round(fps);
        return standardPresets[key] || "";
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ–∫–≤–µ–Ω—Ü–∏–∏
    function buildSequence(sequence, items, preset, settings, audioVariantsFolder) {
        if (!sequence) return;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        var videoTrack1 = sequence.videoTracks.numTracks > 0 ? sequence.videoTracks[0] : null;
        var audioTrack1 = sequence.audioTracks.numTracks > 0 ? sequence.audioTracks[0] : null;
        
        if (!videoTrack1 || !audioTrack1) {
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ–∫–∞–º —Å–µ–∫–≤–µ–Ω—Ü–∏–∏");
            return;
        }
        
        var currentTime = 0;
        
        for (var i = 0; i < items.pairs.length; i++) {
            var pair = items.pairs[i];
            
            // –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            var audioFile = findAudioVariantFile(audioVariantsFolder, pair.baseName, preset.pitch);
            
            if (pair.imageItem && audioFile) {
                try {
                    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
                    var audioItems = app.project.importFiles([audioFile.fsName], false, app.project.rootItem, false);
                    
                    if (audioItems && audioItems.length > 0) {
                        var audioItem = audioItems[0];
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω
                        videoTrack1.insertClip(pair.imageItem, currentTime);
                        audioTrack1.insertClip(audioItem, currentTime);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª–∏–ø—ã
                        var videoClip = videoTrack1.clips[videoTrack1.clips.numItems - 1];
                        var audioClip = audioTrack1.clips[audioTrack1.clips.numItems - 1];
                        
                        if (videoClip && audioClip) {
                            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                            var audioDuration = audioClip.duration.seconds;
                            videoClip.end = videoClip.start + audioDuration;
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
                            applyEffectsToClip(videoClip, preset);
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                            currentTime += audioDuration;
                        }
                    }
                } catch(e) {
                    $.writeln("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–ø–æ–≤: " + e.toString());
                }
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –∞—É–¥–∏–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    function findAudioVariantFile(audioVariantsFolder, baseName, pitch) {
        var folder = new Folder(audioVariantsFolder);
        if (!folder.exists) return null;
        
        var pitchSuffix = "_pitch_" + pitch.replace(".", "_").replace("+", "");
        if (pitch === "0") pitchSuffix = "_pitch_0";
        
        var files = folder.getFiles();
        for (var i = 0; i < files.length; i++) {
            var fileName = files[i].name;
            if (fileName.indexOf(baseName) === 0 && fileName.indexOf(pitchSuffix) > -1) {
                return files[i];
            }
        }
        
        return null;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    function applyEffectsToClip(clip, preset) {
        if (!clip) return;
        
        var videoComponents = clip.components;
        if (!videoComponents) return;

        // Motion —ç—Ñ—Ñ–µ–∫—Ç (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
        var motion = videoComponents[0]; // Motion –æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if (motion && motion.displayName === "Motion") {
            // Ken Burns —ç—Ñ—Ñ–µ–∫—Ç
            if (preset.kenBurns && preset.kenBurns.type !== "–í—ã–∫–ª—é—á–µ–Ω") {
                applyKenBurnsFixed(motion, clip, preset.kenBurns);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º Lumetri Color –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if (preset.vignette && preset.vignette.enabled || 
            preset.colorFilter && preset.colorFilter.enabled) {
            
            // –ò—â–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            var lumetriEffect = findEffectByName("Lumetri Color");
            if (lumetriEffect) {
                clip.addVideoEffect(lumetriEffect);
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                var addedLumetri = null;
                for (var i = 0; i < videoComponents.numItems; i++) {
                    if (videoComponents[i].displayName === "Lumetri Color") {
                        addedLumetri = videoComponents[i];
                        break;
                    }
                }
                
                if (addedLumetri) {
                    applyLumetriSettings(addedLumetri, preset);
                }
            }
        }

        // –ü–µ—Ä–µ—Ö–æ–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏
        if (preset.transition) {
            applyTransition(clip, preset.transition);
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è Ken Burns
    function applyKenBurnsFixed(motionComponent, clip, kenBurns) {
        if (!motionComponent || !motionComponent.properties) return;
        
        var props = motionComponent.properties;
        var scale = null;
        var position = null;
        
        // –ü–æ–∏—Å–∫ —Å–≤–æ–π—Å—Ç–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        for (var i = 0; i < props.numItems; i++) {
            var prop = props[i];
            if (prop.displayName === "Scale") scale = prop;
            if (prop.displayName === "Position") position = prop;
        }
        
        if (!scale || !position) return;
        
        var startTime = clip.inPoint.seconds;
        var endTime = clip.outPoint.seconds;
        var intensity = kenBurns.intensity / 100;

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã
        while (scale.getKeys().length > 0) {
            scale.removeKey(0);
        }
        while (position.getKeys().length > 0) {
            position.removeKey(0);
        }

        switch (kenBurns.type) {
            case "Zoom In":
                scale.addKey(startTime);
                scale.setValueAtKey(startTime, 100);
                scale.addKey(endTime);
                scale.setValueAtKey(endTime, 100 + (20 * intensity));
                break;
                
            case "Zoom Out":
                scale.addKey(startTime);
                scale.setValueAtKey(startTime, 100 + (20 * intensity));
                scale.addKey(endTime);
                scale.setValueAtKey(endTime, 100);
                break;
                
            case "Pan Left":
                position.addKey(startTime);
                position.setValueAtKey(startTime, [0.5, 0.5]);
                position.addKey(endTime);
                position.setValueAtKey(endTime, [0.5 - (0.1 * intensity), 0.5]);
                break;
                
            case "Pan Right":
                position.addKey(startTime);
                position.setValueAtKey(startTime, [0.5, 0.5]);
                position.addKey(endTime);
                position.setValueAtKey(endTime, [0.5 + (0.1 * intensity), 0.5]);
                break;
                
            case "Random":
                // –°–ª—É—á–∞–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                var random = Math.random();
                if (random < 0.5) {
                    scale.addKey(startTime);
                    scale.setValueAtKey(startTime, 100);
                    scale.addKey(endTime);
                    scale.setValueAtKey(endTime, 100 + (20 * intensity));
                } else {
                    position.addKey(startTime);
                    position.setValueAtKey(startTime, [0.5, 0.5]);
                    position.addKey(endTime);
                    position.setValueAtKey(endTime, [0.5 + (0.1 * intensity * (Math.random() - 0.5)), 0.5]);
                }
                break;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
    function findEffectByName(effectName) {
        // –í Premiere —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ QE DOM
        var qeProject = qe.project;
        if (!qeProject) return null;
        
        var videoEffects = qeProject.getVideoEffectList();
        for (var i = 0; i < videoEffects.length; i++) {
            if (videoEffects[i].displayName === effectName) {
                return videoEffects[i];
            }
        }
        
        return null;
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Lumetri
    function applyLumetriSettings(lumetriComponent, preset) {
        if (!lumetriComponent || !lumetriComponent.properties) return;
        
        var props = lumetriComponent.properties;
        
        // –í–∏–Ω—å–µ—Ç–∫–∞
        if (preset.vignette && preset.vignette.enabled) {
            setComponentProperty(props, "Vignette Amount", -(preset.vignette.intensity / 100));
        }
        
        // –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        if (preset.colorFilter && preset.colorFilter.enabled && preset.colorFilter.lumetri) {
            var lumetriSettings = preset.colorFilter.lumetri;
            
            for (var setting in lumetriSettings) {
                var propName = setting.charAt(0).toUpperCase() + setting.slice(1);
                setComponentProperty(props, propName, lumetriSettings[setting]);
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    function setComponentProperty(properties, propName, value) {
        for (var i = 0; i < properties.numItems; i++) {
            if (properties[i].displayName === propName) {
                try {
                    properties[i].setValue(value);
                } catch(e) {
                    $.writeln("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å " + propName + ": " + e.toString());
                }
                break;
            }
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    function applyTransition(clip, transition) {
        if (!clip || !transition) return;
        
        var track = clip.parentTrack;
        if (!track) return;
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–ø–∞
        var clipIndex = -1;
        for (var i = 0; i < track.clips.numItems; i++) {
            if (track.clips[i] === clip) {
                clipIndex = i;
                break;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–ø–∞
        if (clipIndex >= 0 && clipIndex < track.clips.numItems - 1) {
            var nextClip = track.clips[clipIndex + 1];
            
            try {
                // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                var overlapTime = transition.duration;
                var clipEnd = clip.end.seconds;
                var nextStart = nextClip.start.seconds;
                
                // –°–¥–≤–∏–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
                if (nextStart > clipEnd - overlapTime) {
                    nextClip.start = clipEnd - overlapTime;
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                var transitionItem = getTransitionItem(transition.type);
                if (transitionItem) {
                    track.insertTransition(transitionItem, clipEnd - overlapTime);
                }
                
            } catch(e) {
                $.writeln("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞: " + e.toString());
            }
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞
    function getTransitionItem(transitionName) {
        // –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        var transitionMap = {
            "Fade": "Dip to Black",
            "Cross Dissolve": "Cross Dissolve",
            "Dip to Black": "Dip to Black",
            "Dip to White": "Dip to White",
            "Wipe": "Wipe",
            "Slide": "Slide",
            "Push": "Push",
            "Zoom": "Cross Zoom"
        };
        
        var actualName = transitionMap[transitionName] || "Cross Dissolve";
        
        // –ü–æ–∏—Å–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        var qeProject = qe.project;
        if (qeProject) {
            var transitions = qeProject.getVideoTransitionList();
            for (var i = 0; i < transitions.length; i++) {
                if (transitions[i].displayName === actualName) {
                    return transitions[i];
                }
            }
        }
        
        return null;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–æ–≤
    function importProjectFiles(scanResult, projectBin, progressBar) {
        var imported = {
            pairs: []
        };
        
        var totalFiles = scanResult.pairs.length;
        
        for (var i = 0; i < scanResult.pairs.length; i++) {
            progressBar.value = (i / totalFiles) * 50;
            
            var pair = scanResult.pairs[i];
            
            try {
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                var imageItems = app.project.importFiles(
                    [pair.image.fsName], 
                    false,  // suppressUI
                    projectBin,  // targetBin
                    false   // importAsNumberedStills
                );
                
                imported.pairs.push({
                    baseName: pair.baseName,
                    number: pair.number,
                    imageItem: imageItems && imageItems.length > 0 ? imageItems[0] : null,
                    originalAudio: pair.audio
                });
                
            } catch(e) {
                $.writeln("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ " + pair.image.name + ": " + e.toString());
            }
        }
        
        return imported;
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ AME
    function exportSequence(sequence, outputFolder, settings) {
        if (!sequence) return;
        
        var outputFileName = sequence.name + "_" + settings.width + "x" + settings.height + ".mp4";
        var outputPath = outputFolder + "/" + outputFileName;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Media Encoder
            if (!MediaEncoderIntegration.checkMediaEncoder()) {
                alert("Adobe Media Encoder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.");
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            var platform = detectPlatformFromSettings(settings);
            var optimizedSettings = MediaEncoderIntegration.optimizeForSocialMedia(platform);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            var exportSettings = {
                width: settings.width,
                height: settings.height,
                fps: settings.fps,
                bitrate: settings.bitrate,
                codec: optimizedSettings.codec,
                profile: optimizedSettings.profile,
                level: optimizedSettings.level,
                keyframeInterval: optimizedSettings.keyframeInterval,
                twoPass: optimizedSettings.twoPass
            };
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
            var presetPath = createTempExportPreset(exportSettings);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å AME
            MediaEncoderIntegration.addToQueue(sequence, outputPath, presetPath, {
                onProgress: function(percent) {
                    $.writeln("–≠–∫—Å–ø–æ—Ä—Ç: " + percent + "%");
                },
                onComplete: function() {
                    $.writeln("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: " + outputFileName);
                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
                    var tempFile = new File(presetPath);
                    if (tempFile.exists) tempFile.remove();
                },
                onError: function(error) {
                    alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + error);
                }
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            app.encoder.startBatch();
            
        } catch (e) {
            alert("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + e.toString() + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ File > Export > Media –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞.");
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    function createTempExportPreset(settings) {
        var tempFolder = Folder.temp.fsName;
        var presetName = "auto_montage_preset_" + Date.now() + ".epr";
        var presetPath = tempFolder + "/" + presetName;
        
        var presetXML = MediaEncoderIntegration.createCustomPreset(presetName, settings);
        
        var file = new File(presetPath);
        file.open("w");
        file.write(presetXML);
        file.close();
        
        return presetPath;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    function detectPlatformFromSettings(settings) {
        var ratio = settings.width / settings.height;
        
        if (ratio === 1) return "Instagram";
        if (ratio < 1) return "TikTok";
        if (settings.width === 1920 && settings.height === 1080) return "YouTube";
        
        return "YouTube"; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // ===== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ê–£–î–ò–û =====
    
    function prepareAudioFiles(folderPath, progressBar, progressText) {
        progressText.text = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤...";
        progressBar.value = 0;
        
        // –ü—É—Ç—å –∫ bat —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
        var scriptFolder = new File($.fileName).parent;
        var batFile = new File(scriptFolder.fsName + "/enhanced-audio-processor.bat");
        
        if (!batFile.exists) {
            alert("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª enhanced-audio-processor.bat –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞!");
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π bat —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–µ
        var tempBat = new File(folderPath + "/temp_audio_process.bat");
        tempBat.open("w");
        tempBat.writeln("@echo off");
        tempBat.writeln("cd /d \"" + folderPath + "\"");
        tempBat.writeln("call \"" + batFile.fsName + "\" \"" + folderPath + "\"");
        tempBat.close();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        tempBat.execute();
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        $.sleep(1000);
        tempBat.remove();
        
        progressText.text = "–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É audio_variants";
        progressBar.value = 100;
    }

    // ===== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–†–ï–°–ï–¢–ê–ú–ò =====
    
    function readPresets() {
        var file = new File(File($.fileName).parent.fsName + "/presets.json");
        if (!file.exists) {
            return getDefaultPresets();
        }
        
        file.open("r");
        try {
            var content = file.read();
            var presets = JSON.parse(content);
            return Array.isArray(presets) ? presets : getDefaultPresets();
        } catch (e) {
            return getDefaultPresets();
        } finally {
            file.close();
        }
    }

    function savePreset(preset) {
        var presets = readPresets();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ—Å–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        var existingIndex = -1;
        for (var i = 0; i < presets.length; i++) {
            if (presets[i].name === preset.name) {
                existingIndex = i;
                break;
            }
        }
        
        if (existingIndex >= 0) {
            presets[existingIndex] = preset;
        } else {
            presets.push(preset);
        }
        
        var file = new File(File($.fileName).parent.fsName + "/presets.json");
        file.open("w");
        file.write(JSON.stringify(presets, null, 2));
        file.close();
    }

    function getDefaultPresets() {
        return [
            {
                name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
                pitch: "0",
                kenBurns: { type: "–í—ã–∫–ª—é—á–µ–Ω", intensity: 0 },
                transition: { type: "Fade", duration: 1.0 },
                vignette: { enabled: false, intensity: 0 },
                colorFilter: { enabled: false, type: "–¢–µ–ø–ª—ã–π" },
                overlay: { enabled: false, path: "" }
            },
            {
                name: "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π",
                pitch: "-1",
                kenBurns: { type: "Zoom In", intensity: 30 },
                transition: { type: "Cross Dissolve", duration: 1.5 },
                vignette: { enabled: true, intensity: 60 },
                colorFilter: { enabled: true, type: "–•–æ–ª–æ–¥–Ω—ã–π" },
                overlay: { enabled: false, path: "" }
            },
            {
                name: "–î–∏–Ω–∞–º–∏—á–Ω—ã–π",
                pitch: "-0.5",
                kenBurns: { type: "Random", intensity: 50 },
                transition: { type: "Zoom", duration: 0.5 },
                vignette: { enabled: false, intensity: 0 },
                colorFilter: { enabled: false, type: "–¢–µ–ø–ª—ã–π" },
                overlay: { enabled: false, path: "" }
            },
            {
                name: "–í–∏–Ω—Ç–∞–∂",
                pitch: "-1.5",
                kenBurns: { type: "Pan Right", intensity: 20 },
                transition: { type: "Dip to Black", duration: 2.0 },
                vignette: { enabled: true, intensity: 80 },
                colorFilter: { enabled: true, type: "–°–µ–ø–∏—è" },
                overlay: { enabled: true, path: "overlays/film_grain.png" }
            },
            {
                name: "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
                pitch: "0",
                kenBurns: { type: "–í—ã–∫–ª—é—á–µ–Ω", intensity: 0 },
                transition: { type: "Fade", duration: 0.5 },
                vignette: { enabled: false, intensity: 0 },
                colorFilter: { enabled: true, type: "–ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π" },
                overlay: { enabled: false, path: "" }
            }
        ];
    }

    function loadPresetsIntoDropdowns(dropdowns) {
        var presets = readPresets();
        var presetNames = ["Random"];
        
        for (var i = 0; i < presets.length; i++) {
            presetNames.push(presets[i].name);
        }
        
        for (var j = 0; j < dropdowns.length; j++) {
            dropdowns[j].removeAll();
            for (var k = 0; k < presetNames.length; k++) {
                dropdowns[j].add("item", presetNames[k]);
            }
            dropdowns[j].selection = 0;
        }
    }

    function getSelectedPresets(dropdowns) {
        var selected = [];
        var allPresets = readPresets();
        
        for (var i = 0; i < dropdowns.length; i++) {
            if (dropdowns[i].parent.visible && dropdowns[i].selection) {
                var selectedName = dropdowns[i].selection.text;
                
                if (selectedName === "Random") {
                    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ—Å–µ—Ç
                    var randomIndex = Math.floor(Math.random() * allPresets.length);
                    selected.push(allPresets[randomIndex]);
                } else {
                    // –ò—â–µ–º –ø—Ä–µ—Å–µ—Ç –ø–æ –∏–º–µ–Ω–∏
                    for (var j = 0; j < allPresets.length; j++) {
                        if (allPresets[j].name === selectedName) {
                            selected.push(allPresets[j]);
                            break;
                        }
                    }
                }
            }
        }
        
        return selected;
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
    
    function createPreviewHandler(dropdown) {
        return function() {
            if (!dropdown.selection) return;
            
            var presetName = dropdown.selection.text;
            if (presetName === "Random") {
                alert("–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ—Å–µ—Ç –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
                return;
            }
            
            var presets = readPresets();
            var preset = null;
            
            for (var i = 0; i < presets.length; i++) {
                if (presets[i].name === presetName) {
                    preset = presets[i];
                    break;
                }
            }
            
            if (preset) {
                showPresetPreview(preset);
            }
        };
    }

    function showPresetPreview(preset) {
        var preview = new Window("dialog", "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: " + preset.name);
        preview.orientation = "column";
        preview.alignChildren = ["fill", "top"];
        
        var info = preview.add("panel", undefined, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ—Ç–∞");
        info.preferredSize.width = 400;
        
        var text = info.add("statictext", undefined, 
            "üéµ Pitch: " + preset.pitch + "\n" +
            "üé¨ Ken Burns: " + preset.kenBurns.type + " (" + preset.kenBurns.intensity + "%)\n" +
            "üîÑ –ü–µ—Ä–µ—Ö–æ–¥: " + preset.transition.type + " (" + preset.transition.duration + "s)\n" +
            "üé® –í–∏–Ω—å–µ—Ç–∫–∞: " + (preset.vignette.enabled ? "–î–∞ (" + preset.vignette.intensity + "%)" : "–ù–µ—Ç") + "\n" +
            "üé® –§–∏–ª—å—Ç—Ä: " + (preset.colorFilter.enabled ? preset.colorFilter.type : "–ù–µ—Ç") + "\n" +
            "üìé Overlay: " + (preset.overlay.enabled ? preset.overlay.path : "–ù–µ—Ç"),
            {multiline: true}
        );
        text.preferredSize.height = 150;
        
        var closeBtn = preview.add("button", undefined, "–ó–∞–∫—Ä—ã—Ç—å");
        closeBtn.onClick = function() { preview.close(); };
        
        preview.center();
        preview.show();
    }

    function getplatformIcon(platform) {
        var icons = {
            "YouTube": "üì∫",
            "YouTube Shorts": "üì±",
            "TikTok": "üéµ",
            "Instagram Reels": "üì∏",
            "Instagram Feed": "üì∑",
            "Twitter": "üê¶",
            "Custom": "‚öôÔ∏è"
        };
        return icons[platform] || "üìπ";
    }

    function findMediaEncoder() {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Media Encoder –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö
        var paths = [
            "C:/Program Files/Adobe/Adobe Media Encoder 2023/Adobe Media Encoder.exe",
            "C:/Program Files/Adobe/Adobe Media Encoder 2022/Adobe Media Encoder.exe",
            "C:/Program Files/Adobe/Adobe Media Encoder CC/Adobe Media Encoder.exe"
        ];
        
        for (var i = 0; i < paths.length; i++) {
            var file = new File(paths[i]);
            if (file.exists) {
                return paths[i];
            }
        }
        
        return "";
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    function saveSettings(settings) {
        var file = new File(File($.fileName).parent.fsName + "/settings.json");
        
        try {
            file.open("w");
            file.write(JSON.stringify(settings, null, 2));
            file.close();
            
            alert("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
            return true;
        } catch(e) {
            alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + e.toString());
            return false;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    function loadSettings() {
        var file = new File(File($.fileName).parent.fsName + "/settings.json");
        
        if (!file.exists) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                ffmpegPath: "ffmpeg.exe",
                amePath: findMediaEncoder(),
                threads: 4,
                useCache: true,
                autoSave: true,
                createProxy: false
            };
        }
        
        try {
            file.open("r");
            var content = file.read();
            file.close();
            
            return JSON.parse(content);
        } catch(e) {
            $.writeln("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + e.toString());
            return null;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    function validateProject() {
        var errors = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if (!app.project) {
            errors.push("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Premiere Pro");
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        var version = app.version;
        if (version) {
            var majorVersion = parseInt(version.split(".")[0]);
            if (majorVersion < 14) {
                errors.push("–¢—Ä–µ–±—É–µ—Ç—Å—è Premiere Pro 2020 (14.0) –∏–ª–∏ –Ω–æ–≤–µ–µ");
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        try {
            var testFile = new File(Folder.temp.fsName + "/test_write.txt");
            testFile.open("w");
            testFile.write("test");
            testFile.close();
            testFile.remove();
        } catch(e) {
            errors.push("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É");
        }
        
        return errors;
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	function initializeScript() {
		// –í–∞–ª–∏–¥–∞—Ü–∏—è
		var errors = validateProject();
		if (errors.length > 0) {
			alert("–û—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:\n\n" + errors.join("\n"));
			return false;
		}
		
		// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
		var settings = loadSettings();
		if (!settings) {
			settings = {
				ffmpegPath: "ffmpeg.exe",
				amePath: findMediaEncoder(),
				threads: 4,
				useCache: true,
				autoSave: true,
				createProxy: false
			};
		}
		
		// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ú–û–î–£–õ–ï–ô
		/*
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
		if (typeof AdvancedEffects === 'undefined') {
			alert("–ú–æ–¥—É–ª—å AdvancedEffects –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ effects-module.js");
			return false;
		}
		
		if (typeof MediaEncoderIntegration === 'undefined') {
			alert("–ú–æ–¥—É–ª—å MediaEncoderIntegration –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ media-encoder-integration.js");
			return false;
		}
		*/
		
		// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
		if (typeof AdvancedEffects === 'undefined') {
			AdvancedEffects = {
				applyAdvancedAudioEffects: function() {}
			};
		}
		
		if (typeof MediaEncoderIntegration === 'undefined') {
			MediaEncoderIntegration = {
				checkMediaEncoder: function() { return false; },
				optimizeForSocialMedia: function() { return {}; },
				createCustomPreset: function() { return ""; }
			};
		}
		
		return true;
	}

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    win.center();
    win.show();
})();